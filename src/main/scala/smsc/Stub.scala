package smsc

import java.util.concurrent.atomic.AtomicInteger

import smpp.CommandStatus._
import smpp.Pdu._
import smpp._

/**
  * SMSC Stub Server object that creates successful responses for every request.
  */
object Stub {

  val StubSystemId = "SMSCStub"

  /**
   * Creates a successful response PDU for a request with `command_status` set to `ESME_ROK`.
   *
   * @param request a request PDU
   * @return the matching successful response PDU with the same value of `sequence_number`
   */
  def responseTo(request: Pdu): Pdu = {
    request match {
      case BindTransmitter(header, body) => BindTransmitterResp(respHeader(header, ESME_ROK), Bind.respBody(StubSystemId))
      case BindReceiver(header, body) => BindReceiverResp(respHeader(header, ESME_ROK), Bind.respBody(StubSystemId))
      case BindTransceiver(header, body) => BindTransceiverResp(respHeader(header, ESME_ROK), Bind.respBody(StubSystemId))
      case Unbind(header, body) => Unbind(respHeader(header, ESME_ROK), body)
      case EnquireLink(header, body) => EnquireLinkResp(respHeader(header, ESME_ROK), body)
      case SubmitSm(header, body) => SubmitSmResp(respHeader(header, ESME_ROK), Submit.respBody(newMessageId))
      case GenericNack(header, body) => NoPdu(header, body)
    }
  }

  /** Counter of `message_id` values generated by the stub. */
  val counter: AtomicInteger = new AtomicInteger(0)

  /** Create a string value for `message_id` generated by the stub. */
  def newMessageId = "Stub%08d".format(counter.incrementAndGet)
}
