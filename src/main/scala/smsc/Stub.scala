package smsc

import java.util.concurrent.atomic.AtomicInteger

import smpp.CommandStatus._
import smpp.Pdu._
import smpp._

/**
  * SMSC Stub Server object that creates successful responses for every request.
  */
object Stub {

  val StubSystemId = "SMSCStub"

  /**
   * Creates a sequence of successful response PDUs for a request, each with `command_status`
   * set to `ESME_ROK`.
   *
   * @param request a request PDU
   * @return a successful response PDU with the same value of `sequence_number` and maybe
   *         another PDU (e.g. a delivery receipt for a `submit_sm` that requests one.
   */
  def responsesTo(request: Pdu): Seq[Pdu] =
    request match {
      case BindTransmitter(header, body) =>
        Seq(BindTransmitterResp(respHeader(header, ESME_ROK), Bind.respBody(StubSystemId)))
      case BindReceiver(header, body) =>
        Seq(BindReceiverResp(respHeader(header, ESME_ROK), Bind.respBody(StubSystemId)))
      case BindTransceiver(header, body) =>
        Seq(BindTransceiverResp(respHeader(header, ESME_ROK), Bind.respBody(StubSystemId)))
      case Unbind(header, _) =>
        Seq(UnbindResp(respHeader(header, ESME_ROK), EmptyBody()))
      case EnquireLink(header, _) =>
        Seq(EnquireLinkResp(respHeader(header, ESME_ROK), EmptyBody()))
      case SubmitSm(header, body) =>
        val resp = SubmitSmResp(respHeader(header, ESME_ROK), Submit.respBody(newMessageId))
        if (RegisteredDelivery.smscReceiptRequested(body.registeredDelivery)) {
          Seq(resp, Deliver.deliveryReceipt(body, resp.body.messageId))
        } else {
          Seq(resp)
        }
      case CancelSm(header, body) =>
        Seq(CancelSmResp(respHeader(header, ESME_ROK), EmptyBody()))
      // No current response for other request PDUs.
      case _ => Seq()
    }

  /** Counter of `message_id` values generated by the stub. */
  val counter: AtomicInteger = new AtomicInteger(0)

  /** Create a string value for `message_id` generated by the stub. */
  def newMessageId = "Stub%08d".format(counter.incrementAndGet)
}
